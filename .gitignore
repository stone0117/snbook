!.gitignore
# 这个也被编译了???



# ignore directories
.idea/
.git/

# ignore files
# 表示忽略所有 .log 文件
*.log:
# *.log

# exclude files
# 表示但lib.a除外
!lib.a

# 表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
/TODO
/todo

# 表示忽略 build/目录下的所有文件，过滤整个build文件夹；
build/

# 表示会忽略doc/notes.txt但不包括 doc/server/arch.txt
doc/*.txt

# 表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
bin/:

# 表示忽略根目录下的bin文件
/bin:

# 表示忽略cat.c，不忽略 build/cat.c
/*.c:

# 表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj
debug/*.obj:

# 表示忽略/foo,a/foo,a/b/foo等
**/foo:

# 表示忽略a/b, a/x/b,a/x/y/b等
a/**/b:

# 表示不忽略bin目录下的run.sh文件
!/bin/run.sh

# 表示忽略当前路径的 config.php 文件
config.php:

# 表示过滤整个文件夹
/mtk/

# 表示过滤所有.zip文件
*.zip
!/mtk/one.txt

# 唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？
# 想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：
/mtk/*
!/mtk/one.txt
# 假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！
# 注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！


#还有一些规则如下：
fd1/*
# 说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；

/fd1/*
# 说明：忽略根目录下的 /fd1/ 目录的全部内容；
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
